!! Looking at Dynamic Features

The previous chapter presented the implementation of a simple interpreter for a limited subset of Pharo.
This chapter will cover lexical closures. 



!!! Simple blocks
Simple blocks are blocks without arguments, and without references to anything except literal objects. 
First the value of a block is the block itself.


[[[
BasicInterpreter >> testSimpleBlock
	"
	simpleBlock

		^ [  5 ]
	"
	| ast result |
	ast := (CInterpretable >> #simpleBlock) ast.
	result := self interpreter execute: ast.
	self assert: result class equals: CBlock

]]]

[[[
Object subclass: #CBlock
	instanceVariableNames: ' interpreter blockDefinition'
	classVariableNames: ''
	package: 'Champollion-Core'
]]]

[[[
CBlock >> value

	^ interpreter visitNode: blockDefinition body 

]]]

[[[
BasicInterpreter >> visitBlockNode: aBlockNode 
	^ CBlock new 	
		blockDefinition: aBlockNode; 
		interpreter: self; 
		yourself
]]]

[[[
BasicInterpreter >> visitMessageNode: aMessageNode

	| rec args method res | 
	self pushNewFrame.
	rec := self visitNode: aMessageNode receiver.
	args := aMessageNode arguments collect: [ :each | self visitNode: each ].
	
	(aMessageNode selector = #value) 
		ifTrue: [ res := rec value ]
		ifFalse: [  
		(aMessageNode methodNode isPrimitive "and: [ aMessageNode methodNode isValueMessage not ]")
			ifTrue: [
			res := rec 
					tryPrimitive: (aMessageNode methodNode pragmas first argumentAt: 'primitive:') value 
					withArgs: args ]
			ifFalse: [ 	
				method :=  aMessageNode receiver isSuper
					ifTrue: [ self lookup: aMessageNode selector fromClass: rec class superclass ]
					ifFalse: [ self lookup: aMessageNode selector fromClass: rec class ].
				res := self execute: method withReceiver: rec andArguments: args]
		].
	self popFrame.
	^ res 
]]]










