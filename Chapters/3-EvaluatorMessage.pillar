!! Messages 

While the previous chapter focused on basic element interpretation, this one will focus on the key abstraction in 
object-oriented programming: message send.
Introducing message send also means that we have to introduce a little infrastructure to manage the fact that each message can have a different receiver, temporaries and arguments. 
Therefore we will cover: stack management, messages, temporaries, arguments and lookup.


!!! Introducing Stack Management

The way we managed the receiver is overly simplistic.
Indeed, each time a program will send a message to another object,  we should change the receiver and when the computation ends, the previous receiver should be put back. Therefore we need a stack.
In addition the same happens for handling methods arguments and temporaries. 
We address this point now.

We add a stack instance and this stack will keep information about the current receiver, as well as temporaries and arguments as we will see later. 

[[[
Object subclass: #CHInterpreter
	instanceVariableNames: 'stack'
	classVariableNames: ''
	package: 'Champollion-Core'
]]]

The idea is that the stack will hold a ''frame''. A frame can be represented for now as a dictionary. 
We define the method ==pushNewFrame==. This means that we add on the top of the stack a new dictionary instance. 

[[[
CHInterpreter >> pushNewFrame [
	"Pushing a new scope consists in creating a new dictionary whose parent is the top of the stack
	and pushing it as a new top. This way a variable not found in current scope will be looked up in previous scope."

	| newTop |
	newTop := Dictionary new.
	stack push: newTop.
	^ newTop
]
]]]

We initialize the interpreter state by creating a new stack. 

[[[language=pharo
CHInterpreter >> initialize [
	super initialize. 
	stack := CTStack new.
]
]]]

Accessing the receiver is just accessing the value of the key ==#self== of the current frame. 

[[[language=pharo
CHInterpreter >> receiver [
	^ self topFrame at: #self
]
]]]

We expose also the top frame to ease manipulation. 
[[[language=pharo
CHInterpreter >> topFrame [
	^ stack top
]
]]]

We extend the ==executeMethod:withReceiver:== to create a new frame and define the receiver as value of the ==#self== key.

[[[language=pharo
CHInterpreter >> executeMethod: anAST withReceiver: anObject [
	self pushNewFrame.
	self topFrame at: #self  put: anObject.
	^ self visitNode: anAST
]
]]]

We are ready to start. This is not totally correct and we will address this later. 
Well not totally. When we will execute multiple sends the stack will only grow and when the execution of a message is finished, its execution context
should be discarded from the stack. 


!!! Sending a Message: Self-Sends

As usual we start by defining a new method exhibiting the expected behavior. 
Here we just define a method ==sendMessageReturnX== which invokes another one. 

[[[language=pharo
CHInterpretable >> sendMessageReturnX [
	^ self returnX
]
]]]

And we define a companion test.

[[[language=pharo
CHInterpreterTest >> testSelfSend [
	"
	sendMessageReturnX
		^ self returnX
	"

	receiver x: 100.
	self 
		assert: (self executeSelector: #sendMessageReturnX) 
		equals: 100
]
]]]

We define the method ==visitMessageNode:== as follows: 
First we visit the receiver node (which in the future may contain other message sends).
We can have an expression as receiver: as for example ==(anObject returnX)== in the more complex message ==(anObject returnX) returnArg: 12==.

Then we get the method ast from the class of the receiver.
And we return the result of the execution of the method with the receiver.

[[[
CHInterpreter >> visitMessageNode: aMessageNode [

	| rec method | 
	rec := self visitNode: aMessageNode receiver.
	method := (rec class compiledMethodAt: aSymbol) ast.
	^ self executeMethod: method withReceiver: rec
]
]]]

This is clearly limited since we do not implement method lookup. We will address it later. 
But so far so good.


!!! Balancing the Stack

We mentioned earlier that the following method (==executeMethod:withReceiver: ==) was not fully correct.

[[[language=pharo
CHInterpreter >> executeMethod: anAST withReceiver: anObject [
	self pushNewFrame.
	self topFrame at: #self  put: anObject.
	^ self visitNode: anAST
]
]]]

Indeed, when we will execute multiple sends the stack will only grow and when the execution of a message is finished, its execution context
should be discarded from the stack. The current implementation clearly does not do it. 
Let us write a test showing the problem.

We add an extra instance variable to the class ==CInterpretable== with its companion accessors. 
This way we will be able to test that the correct object is set and passed around in future example.

[[[
Object subclass: #CHInterpretable
	instanceVariableNames: 'x collaborator'
	classVariableNames: ''
	package: 'Champollion-Core'
]]]

[[[
CHInterpreterTest >> collaborator [
	^ collaborator
]
]]]

[[[
CHInterpreterTest >> collaborator: anObject [
	collaborator := anObject
]
]]]

We add another instance variable named ==collaborator== to the test class. 
[[[
TestCase subclass: #CHInterpreterTest
	instanceVariableNames: 'interpreter receiver collaborator'
	classVariableNames: ''
	package: 'Champollion'
]]]

In the ==setUp== we assign a new object to the collaborator instance variable and in addition, we set the 
new object as collaborator of the object we access via the ==receiver== instance variable.

[[[
CHInterpreterTest >> setUp [
	super setUp.
	interpreter := self interpreterClass new.
	receiver := CHInterpretable new.
	collaborator := CHInterpretable new.
	receiver collaborator: collaborator
]
]]]

The following test ==testBalancingStack== execute the message ==setXAndMessage==.
We assign the variable to ==x==, send the message ==returnX== to another (uninitialized object), 
and return the value of ==x==.

[[[
CHInterpreterTest >> testBalancingStack [
	"
	setXAndMessage

		x := 1000.
		collaborator returnX.
		^ x
	"
	self assert: (self executeSelector: #setXAndMessage) equals: 1000
	]
]]]

Executing this test breaks because the access to the instance variable ==x== returns nil. 
This is due to the fact that the frame created by the execution of the message ==returnX== 
has the uninitialized receiver (the object refered by ==collaborator== variable) and that 
such frame is not pop out of the stack once the message is executed. 

To solve this problem is relatively simple, we should pop the frame at the end of message send. 
This way the stack is balanced. This is what the new implementation of ==executeMethod:withReceiver:==
is doing.

[[[language=pharo
CHInterpreter >> executeMethod: anAST withReceiver: anObject
	self pushNewFrame.
	self topFrame at: #self  put: anObject.
	result := self visitNode: anAST.
	self popFrame.
	^ result
]]]

We are ready our journey in message handling.

!!! Supporting Message Arguments

We add support for message arguments so that we can start having more interesting examples.
We introduce two little helper methods to add and access new values in the current frame. 


[[[
CHInterpreter >> tempAt: aSymbol put: anInteger [
	self topFrame at: aSymbol put: anInteger
]
]]]

[[[
CHInterpreter >> tempAt: aSymbol [
	^ self topFrame at: aSymbol
]
]]]

While interpreting a message, when we interpret an argument we need the return the value that such argument
get for this specific message send. The same method ==returnArg: anArg== interpreted with two different message sends
should return different value.

[[[
returnArg: arg
	^ arg
]]]

The message ==anObject returnArg: 12== should return 12 while ==anObject returnArg: 24== should return 24.
The question is how to pass the actual values of the parameters to the message interpretation. 
This is where the current frame comes into play. 
On message request for execution, we will add the value of actual parameter to the current frame and during the interpretation ]
of a message/method we will be able to access such values.

Therefore handling arguments is two distinct actions: 
- binding the values of the arguments in the current frame, and 
- during message interpretation, access the arguments values.
This is what we do in the following methods.

First we define the method ==visitArgumentNode:== to look for the value of an argument in the current frame.

[[[
CHInterpreter >> visitArgumentNode: aRBArgumentNode [
	^ self tempAt: aRBArgumentNode name
]
]]]

We define a new method ==executeMethod:withReceiver:andArguments:== which has as extra argument a collection representing the 
arguments of the method to be executed. 
In addition to add the receiver to the new frame representing the execution, we add a binding for each parameters (called unfornately arguments in Pharo AST) 
with their corresponding value in the argument collection. The use of the message ==with:do:== ensures that both the parameter list and actual arguments have the 
same size.

[[[
CHInterpreter >> executeMethod: anAST withReceiver: anObject andArguments: aCollection [
	| result |
	self pushNewFrame.
	self tempAt: #self put: anObject.
	anAST arguments with: aCollection do: [ :arg :value | self tempAt: arg name put: value ]. 
	result := self visitNode: anAST.
	self popFrame.
	^ result
]
]]]

To avoid duplication logic, we revisit ==executeMethod:withReceiver:== to use the previous. 
[[[
CHInterpreter >> executeMethod: anAST withReceiver: anObject [
	 ^ self executeMethod: anAST withReceiver: anObject andArguments: #()
]
]]]

Finally during the message interpretation, after computing the value of the receiver, we compute the value of the arguments
by collecting their own recursive interpretation. This is such a treatment that ensures that argument expressions are recursively executed. 
For example in the message ==anObject returnArg: 1+4== that the value of the argument is ==5==.

[[[
CHInterpreter >> visitMessageNode: aMessageNode [
	| rec method args | 
	rec := self visitNode: aMessageNode receiver.
	args := aMessageNode arguments collect: [ :each | self visitNode: each ].
	method := self lookup: aMessageNode selector fromClass: rec class.
	^ self executeMethod: method withReceiver: rec andArguments: args
]
]]]








HERE HERE HERE








!!! Different Receiver of Messages

[[[
TestCase subclass: #CHInterpreterTest
	instanceVariableNames: 'interpreter receiver collaborator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Champollion-Core'
]]]

[[[
CHInterpreterTest >> setUp
	super setUp.
	interpreter := self interpreterClass new.
	receiver := CInterpretable new.
	collaborator := CInterpretable new.
	receiver collaborator: collaborator 
]]]


[[[
CHInterpreterTest >> testInstanceVariableStoreInMethodActivationDoesNotChangeSender
	"
	changeCollaboratorX
		collaborator x: 200
	"

	receiver x: 100.
	collaborator x: 300.
	self assert: (self executeSelector: #changeCollaboratorX) equals: 200
]]]

[[[
CInterpretable >> changeCollaboratorX

	collaborator store100IntoX
]]]









!!! Lookup

[[[
CHInterpreter >> visitMessageNode: aMessageNode

	| rec method | 
	rec := self visitNode: aMessageNode receiver.
	method := self lookup: aMessageNode selector fromClass: rec class.
	^ self executeMethod: method withReceiver: rec
]]]




[[[
CHInterpreter >> visitMessageNode: aMessageNode

	| rec method | 
	rec := self visitNode: aMessageNode receiver.
	method := self lookup: aMessageNode selector fromClass: rec class.
	^ self executeMethod: method withReceiver: rec
]]]


[[[
CHInterpreter >> lookup: aSymbol fromClass: aClass 
	"Return the AST of a method or nil if none is found"

	"If the class defines a method for the selector, return the AST corresponding to the method"
	(aClass includesSelector: aSymbol)
		ifTrue: [ ^ (aClass compiledMethodAt: aSymbol) ast ].

	"Otherwise lookup recursively in the superclass.
	If we reach the end of the hierarchy return nil"
	^ aClass = ProtoObject 
		ifTrue: [ nil ]
		ifFalse: [ self lookup: aSymbol fromClass: aClass superclass ]
]]]




























!!! Intermezzo -- About temporaries

Before implementing the interpretation of temporaries we want to show some particularities of Pharo semantics.
Temporaries cannot shadow other temporaries.

The following expression is rejected by the compiler because the second ==tmp== definition is illegal. 
[[[language=pharo
[ 
	| tmp |
	tmp := 2. 
	[
		| tmp |
		tmp := 3 ]]
]]]

Similarly a temporary cannot shadow a block or a method parameter.
Therefore the following expression is not allowed.
[[[language=pharo
[ :tmp |
	| tmp |
	tmp := 2]
]]]

The following method is not valid either.
[[[language=pharo
with: arg

	| arg |
	^ arg
]]]	

Finally parameters are read only. 
Therefore the following method is not valid. 
[[[language=pharo
with: arg
	arg := 42	
]]]

As well as the following expression

[[[language=pharo
[ :tmp |
	tmp := 2
	 ]
]]]

We can say that inside a method the names of parameters, temporaries and instance variables are flattened and use a single namespace.


!!! Temporaries












[[[
CHInterpreter >> visitAssignmentNode: anAssignmentNode
	"| x y |
	x := y := 10.
	x
	>>> 10"
	
	| value | 
	value := (self visitNode: anAssignmentNode value).
	anAssignmentNode variable store: value with: self.
	^ value
]]]


[[[
CBasicInterpreterTest >> testTempsAccessShouldNotEscapeMethods

	| ast result |
	ast := (CInterpretable >> #methodWithTemp) ast.
	result := self interpreter execute: ast withReceiver: CInterpretable new. 
	self assert: result equals: nil 
]]]


[[[
CBasicInterpreterTest >> testTempsShouldNotEscapeMethods

	| ast result |
	ast := (CInterpretable >> #methodWithTemp) ast.
	result := self interpreter execute: ast withReceiver: CInterpretable new. 
	self assert: result equals: nil 
]]]

[[[
CBasicInterpreterTest >> testTempsWritingShouldNotEscapeMethods

	| ast result |
	ast := (CInterpretable >> #methodCallingModifyingTemp) ast.
	result := self interpreter execute: ast withReceiver: CInterpretable new. 
	self assert: result equals: 7
]]]


[[[
BasicInterpreter1Test >> testAccessInstanceVariable

	| ast result |
	ast := (CInterpretable >> #returnX) ast.
	result := self interpreter execute: ast withReceiver: (CInterpretable new x: 100).
	self assert: result equals: 100. 
	
]]]



[[[
BasicInterpreter1Test >> testAccessXInInstance

	| ast result |
	ast := (CInterpretable >> #returnX) ast.
	result := self interpreter execute: ast withReceiver: (CInterpretable new x: 100).
	self assert: result equals: 100. 
	
]]]




































































!!! Looking at Dynamic Features (OLD)

The previous chapter presented the implementation of a simple interpreter for a limited subset of Pharo.
This chapter will cover lexical closures. 



!!! Simple blocks
Simple blocks are blocks without arguments, and without references to anything except literal objects. 
First the value of a block is the block itself.


[[[
BasicInterpreter >> testSimpleBlock
	"
	simpleBlock

		^ [  5 ]
	"
	| ast result |
	ast := (CInterpretable >> #simpleBlock) ast.
	result := self interpreter execute: ast.
	self assert: result class equals: CBlock

]]]

[[[
Object subclass: #CBlock
	instanceVariableNames: ' interpreter blockDefinition'
	classVariableNames: ''
	package: 'Champollion-Core'
]]]

[[[
CBlock >> value

	^ interpreter visitNode: blockDefinition body 

]]]

[[[
BasicInterpreter >> visitBlockNode: aBlockNode 
	^ CBlock new 	
		blockDefinition: aBlockNode; 
		interpreter: self; 
		yourself
]]]

[[[
BasicInterpreter >> visitMessageNode: aMessageNode

	| rec args method res | 
	self pushNewFrame.
	rec := self visitNode: aMessageNode receiver.
	args := aMessageNode arguments collect: [ :each | self visitNode: each ].
	
	(aMessageNode selector = #value) 
		ifTrue: [ res := rec value ]
		ifFalse: [  
		(aMessageNode methodNode isPrimitive "and: [ aMessageNode methodNode isValueMessage not ]")
			ifTrue: [
			res := rec 
					tryPrimitive: (aMessageNode methodNode pragmas first argumentAt: 'primitive:') value 
					withArgs: args ]
			ifFalse: [ 	
				method :=  aMessageNode receiver isSuper
					ifTrue: [ self lookup: aMessageNode selector fromClass: rec class superclass ]
					ifFalse: [ self lookup: aMessageNode selector fromClass: rec class ].
				res := self execute: method withReceiver: rec andArguments: args]
		].
	self popFrame.
	^ res 
]]]










