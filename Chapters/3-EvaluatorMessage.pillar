!! Interpreter1: Handling Messages 

While the previous chapter focused on basic element interpretation, this one will focus on the key abstraction in 
object-oriented programming: message send.
Introducing message send also means that we have to introduce a little infrastructure to manage the fact that each message can have a different receiver, temporaries and arguments. 
Therefore we will cover: stack management, messages, temporaries, arguments and lookup.


!!! Introducing Stack Management

The way we managed the receiver is overly simplistic.
Indeed, each time a program will send a message to another object,  we should change the receiver and when the computation ends, the previous receiver should be put back. Therefore we need a stack.
In addition the same happens for handling methods arguments and temporaries. 
We address this point now.

We add a stack instance and this stack will keep information about the current receiver, as well as temporaries and arguments as we will see later. 

[[[
Object subclass: #CHInterpreter
	instanceVariableNames: 'stack'
	classVariableNames: ''
	package: 'Champollion-Core'
]]]

The idea is that the stack will hold a ''frame''. A frame can be represented for now as a dictionary. 
We define the method ==pushNewFrame==. This means that we add on the top of the stack a new dictionary instance. 

[[[
CHInterpreter >> pushNewFrame [
	"Pushing a new scope consists in creating a new dictionary whose parent is the top of the stack
	and pushing it as a new top. This way a variable not found in current scope will be looked up in previous scope."

	| newTop |
	newTop := Dictionary new.
	stack push: newTop.
	^ newTop
]
]]]

We initialize the interpreter state by creating a new stack. 

[[[language=pharo
CHInterpreter >> initialize [
	super initialize. 
	stack := CTStack new.
]
]]]

Accessing the receiver is just accessing the value of the key ==#self== of the current frame. 

[[[language=pharo
CHInterpreter >> receiver [
	^ self topFrame at: #self
]
]]]

We expose also the top frame to ease manipulation. 
[[[language=pharo
CHInterpreter >> topFrame [
	^ stack top
]
]]]

We extend the ==executeMethod:withReceiver:== to create a new frame and define the receiver as value of the ==#self== key.

[[[language=pharo
CHInterpreter >> executeMethod: anAST withReceiver: anObject [
	self pushNewFrame.
	self topFrame at: #self  put: anObject.
	^ self visitNode: anAST
]
]]]

We are ready to start. This is not totally correct and we will address this later. 
Well not totally. When we will execute multiple sends the stack will only grow and when the execution of a message is finished, its execution context
should be discarded from the stack. 


!!! Sending a Message: Self-Sends

As usual we start by defining a new method exhibiting the expected behavior. 
Here we just define a method ==sendMessageReturnX== which invokes another one. 

[[[language=pharo
CHInterpretable >> sendMessageReturnX [
	^ self returnX
]
]]]

And we define a companion test.

[[[language=pharo
CHInterpreterTest >> testSelfSend [
	"
	sendMessageReturnX
		^ self returnX
	"

	receiver x: 100.
	self 
		assert: (self executeSelector: #sendMessageReturnX) 
		equals: 100
]
]]]

We define the method ==visitMessageNode:== as follows: 
First we visit the receiver node (which in the future may contain other message sends).
We can have an expression as receiver: as for example ==(anObject returnX)== in the more complex message ==(anObject returnX) returnArg: 12==.

Then we get the method ast from the class of the receiver.
And we return the result of the execution of the method with the receiver.

[[[
CHInterpreter >> visitMessageNode: aMessageNode [

	| rec method | 
	rec := self visitNode: aMessageNode receiver.
	method := (rec class compiledMethodAt: aSymbol) ast.
	^ self executeMethod: method withReceiver: rec
]
]]]

This is clearly limited since we do not implement method lookup. We will address it later. 
But so far so good.


!!! Balancing the Stack

We mentioned earlier that the following method (==executeMethod:withReceiver: ==) was not fully correct.

[[[language=pharo
CHInterpreter >> executeMethod: anAST withReceiver: anObject [
	self pushNewFrame.
	self topFrame at: #self  put: anObject.
	^ self visitNode: anAST
]
]]]

Indeed, when we will execute multiple sends the stack will only grow and when the execution of a message is finished, its execution context
should be discarded from the stack. The current implementation clearly does not do it. 

Let us write a test showing the problem.
We add an extra instance variable to the class ==CInterpretable== with its companion accessors. 
This way we will be able to test that the correct object is set and passed around in future example.

[[[
Object subclass: #CHInterpretable
	instanceVariableNames: 'x collaborator'
	classVariableNames: ''
	package: 'Champollion-Core'
]]]

[[[
CHInterpreterTest >> collaborator [
	^ collaborator
]
]]]

[[[
CHInterpreterTest >> collaborator: anObject [
	collaborator := anObject
]
]]]

We add another instance variable named ==collaborator== to the test class. 
[[[
TestCase subclass: #CHInterpreterTest
	instanceVariableNames: 'interpreter receiver collaborator'
	classVariableNames: ''
	package: 'Champollion'
]]]

In the ==setUp== we assign a new object to the collaborator instance variable and in addition, we set the 
new object as collaborator of the object we access via the ==receiver== instance variable.

[[[
CHInterpreterTest >> setUp [
	super setUp.
	interpreter := self interpreterClass new.
	receiver := CHInterpretable new.
	collaborator := CHInterpretable new.
	receiver collaborator: collaborator
]
]]]

The following test ==testBalancingStack== execute the message ==setXAndMessage==.
We assign the variable to ==x==, send the message ==returnX== to another (uninitialized object), 
and return the value of ==x==.

[[[
CHInterpreterTest >> testBalancingStack [
	"
	setXAndMessage

		x := 1000.
		collaborator returnX.
		^ x
	"
	self assert: (self executeSelector: #setXAndMessage) equals: 1000
	]
]]]

Executing this test breaks because the access to the instance variable ==x== returns nil. 
This is due to the fact that the frame created by the execution of the message ==returnX== 
has the uninitialized receiver (the object refered by ==collaborator== variable) and that 
such frame is not pop out of the stack once the message is executed. 

To solve this problem is relatively simple, we should pop the frame at the end of message send. 
This way the stack is balanced. This is what the new implementation of ==executeMethod:withReceiver:==
is doing.

[[[language=pharo
CHInterpreter >> executeMethod: anAST withReceiver: anObject [
	self pushNewFrame.
	self topFrame at: #self  put: anObject.
	result := self visitNode: anAST.
	self popFrame.
	^ result
]
]]]

!!! Adding an Extra Test

Since we not lose any opportunity to strenghten our trust in our implementation by adding a new 
test, we take it. 
We define a new method named ==changeCollaboratorX==.

[[[
CInterpretable >> changeCollaboratorX [
	collaborator store100IntoX
]
]]]

Then we test 
[[[
CHInterpreterTest >> testInstanceVariableStoreInMethodActivationDoesNotChangeSender [
	"
	changeCollaboratorX
 		collaborator store100IntoX
	"

	receiver x: 200.
	collaborator x: 300.
	self executeSelector: #changeCollaboratorX.
	self assert: receiver x equals: 200.
	self assert: collaborator x equals: 100
]
]]]



We are ready our journey in message handling.

!!! Supporting Message Arguments

We add support for message arguments so that we can start having more interesting examples.
Let us define some tests.

!!!! A Test First

We define a simple method ==changeCollaboratorWithArgument== which uses a setter.

[[[language=smalltalk
CInterpretable >> changeCollaboratorWithArgument [
	collaborator x: 500
]
]]]

Then we verify that the execution of the new method effectlvely modifies the collaborator object 
as written in ==changeCollaboratorWithArgument==.

[[[language=smalltalk
testArgumentAccess [
	"
	changeCollaboratorWithArgument
		collaborator x: 500
	"

	receiver x: 200.
	collaborator x: 300.
	self executeSelector: #changeCollaboratorWithArgument.
	self assert: receiver x equals: 200.
	self assert: collaborator x equals: 500
]
]]]

Our test fails so we can start to work.

!!!! Some Helpers
We introduce two little helper methods to add and access new values in the current frame. 

[[[
CHInterpreter >> tempAt: aSymbol put: anInteger [
	self topFrame at: aSymbol put: anInteger
]
]]]

[[[
CHInterpreter >> tempAt: aSymbol [
	^ self topFrame at: aSymbol
]
]]]

While interpreting a message, when we interpret an argument we need the return the value that such argument
get for this specific message send. The same method ==returnArg: anArg== interpreted with two different message sends
should return different value.

[[[
returnArg: arg
	^ arg
]]]

The message ==anObject returnArg: 12== should return 12 while ==anObject returnArg: 24== should return 24.
The question is how to pass the actual values of the parameters to the message interpretation. 
This is where the current frame comes into play. 
On message request for execution, we will add the value of actual parameter to the current frame and during the interpretation
of a message/method we will be able to access such values.

Therefore handling arguments is two distinct actions: 
- binding the values of the arguments in the current frame, and 
- during message interpretation, access the arguments values.
This is what we do in the following methods.

First we define the method ==visitArgumentNode:== to look for the value of an argument in the current frame.

[[[
CHInterpreter >> visitArgumentNode: aRBArgumentNode [
	^ self tempAt: aRBArgumentNode name
]
]]]

We define a new method ==executeMethod:withReceiver:andArguments:== which has as extra argument a collection representing the 
arguments of the method to be executed. 
In addition to add the receiver to the new frame representing the execution, we add a binding for each parameters (called unfornately arguments in Pharo AST) 
with their corresponding value in the argument collection. The use of the message ==with:do:== ensures that both the parameter list and actual arguments have the 
same size.

[[[
CHInterpreter >> executeMethod: anAST withReceiver: anObject andArguments: aCollection [
	| result |
	self pushNewFrame.
	self tempAt: #self put: anObject.
	anAST arguments with: aCollection do: [ :arg :value | self tempAt: arg name put: value ]. 
	result := self visitNode: anAST.
	self popFrame.
	^ result
]
]]]

To avoid duplication logic, we revisit ==executeMethod:withReceiver:== to use the previous. 
[[[
CHInterpreter >> executeMethod: anAST withReceiver: anObject [
	 ^ self executeMethod: anAST withReceiver: anObject andArguments: #()
]
]]]

Finally during the message interpretation, after computing the value of the receiver, we compute the value of the arguments
by collecting their own recursive interpretation. This is such a treatment that ensures that argument expressions are recursively executed. 
For example in the message ==anObject returnArg: 1+4== that the value of the argument is ==5==.

[[[
CHInterpreter >> visitMessageNode: aMessageNode [

	| rec method args |
	rec := self visitNode: aMessageNode receiver.
	args := aMessageNode arguments collect: [ :each | self visitNode: each ].
	method := (rec class compiledMethodAt: aSymbol) ast.
	^ self executeMethod: method withReceiver: rec andArguments: args
]
]]]

Our tests should all pass. 

!!! New Setup for Method Lookup

So far we have put aside the method lookup.
We looked directly in the class and this is clearly not good.

To test method lookup we introduce two superclasses as superclass of ==CHInterpretable==: 
The class ==CHInterpretableSecondSuperclass== and its subclass ==CHInterpretableSuperclass==.
With this setup we will be able to test all situations, even the ones which leads to infinite loops
when following the definition of some books.


[[[
Object subclass: #CHInterpretableSecondSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'Champollion-Core'
]]]

[[[
CHInterpretableSecondSuperclass subclass: #CHInterpretableSuperclass
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'Champollion-Core'
]]]

[[[
CHInterpretableSuperclass subclass: #CHInterpretable
	instanceVariableNames: 'x collaborator'
	classVariableNames: ''
	package: 'Champollion-Core'
]]]

Since we may want to invoke method that are not directly defined in the class ==CHInterpretable==
but its superclasses, we adapt the helper method ==executeSelector:== to perform a lookup instead of accessible
only  ==CHInterpretable==.

[[[
CHInterpreterTest >> executeSelector: aSymbol [
	| ast |
	ast := (CInterpretable lookupSelector: aSymbol) ast.
	^ self interpreter executeMethod: ast withReceiver: receiver
]
]]]

In addition we define the method ==methodNotInSubclass== only the superclass of ==CHInterpretable==.

[[[
CHInterpretableSuperclass >> methodNotInSubclass [
	^ 5
]
]]]

Now we are ready to define a test to verify that the method lookup is climbing up the inheritance tree when a 
method is not found.

[[[
CHInterpreterTest >> testLookupMessageInSuperclass [
	"
	CHInterpretable >> sendMessageInSuperclass
		^ self methodNotInSubclass
	CHInterpretableSuperclass >> methodNotInSubclass
		^ 5
	"

	self assert: (self executeSelector: #sendMessageInSuperclass) equals: 5
]
]]]


The test should not work so we are ready to work. 
We define the method ==lookup:fromClass:==. 
- It checks that the current class passed as argument defines the method. In such case it returns the corresponding method AST.
- If the method is not defined in the current class and we are not on the top of the hierarchy we recursively lookup from the superclass.
- Else when we are on top of the hierarchy the  ==lookup:fromClass:== returns nil. This indicates that no method were found. 

The method ==lookup:fromClass:== does not raise an error because this way the visitMessageNode: method will be able to send the ==doesNotUnderstand:== message to the receiver.

[[[
CHInterpreter >> lookup: aSymbol fromClass: aClass [
	"Return the AST of a method or nil if none is found"

	"If the class defines a method for the selector, return the AST corresponding to the method"
	(aClass includesSelector: aSymbol)
		ifTrue: [ ^ (aClass compiledMethodAt: aSymbol) ast ].

	"Otherwise lookup recursively in the superclass.
	If we reach the end of the hierarchy return nil"
	^ aClass = ProtoObject
		ifTrue: [ nil ]
		ifFalse: [ self lookup: aSymbol fromClass: aClass superclass ]
]
]]]

We should call the method ==lookup:fromClass:== from the ==visitMessageNode:==

[[[
CHInterpreter >> visitMessageNode: aMessageNode [
	| rec method args | 
	rec := self visitNode: aMessageNode receiver.
	args := aMessageNode arguments collect: [ :each | self visitNode: each ].
	method := self lookup: aMessageNode selector fromClass: rec class.
	^ self executeMethod: method withReceiver: rec andArguments: args
]
]]]

Now we are ready to work on the case of ==super==. 


!!! The Case of Super

Many people gets confused by super semantics even book authors. 
 ==super== is the receiver of the message as we saw it in the first chapter.
 It means that since ==self== and ==super== are pointing to the same object that 
 the difference should be elsewhere and it is in the lookup.

 We define a method ==superMessageSend==. 
 It is not really good since it uses ==super== while it is not needed. 
 We will see with the handling of overridden messages better 
 tests. 
 
[[[
CHInterpretable >> superMessageSend [
	^ super methodNotInSubclass
]
]]]



Once these methods defined, the following test 

[[[
CHInterpreterTest >> testLookupSuperMessage [
	"
	CHInterpretable >> superMessageSend
		^ super methodNotInSubclass
	Superclass >> methodNotInSubclass
		^ 5
	"

	self assert: (self executeSelector: #superMessageSend) equals: 5
]
]]]

The lookup of the method that should be executed when the receiver is ==super== does not look in the
class of the receiver but in the superclass of the class of the method containing the use of ==super==. 
It implies that we need a way to identify the method currently executed (whose )


We can store this information in the current frame as we do it in the following method ==executeMethod:withReceiver:andArguments:==.
By prefixing with ==\_\_\_==, we make sure that the key for the current method binding is unique. 
[[[
CHInterpreter >> executeMethod: anAST withReceiver: anObject andArguments: aCollection [
	| result |
	self pushNewFrame.
	self tempAt: #___method put: anAST.
	self tempAt: #self put: anObject.
	anAST arguments with: aCollection do: [ :arg :value | self tempAt: arg name put: value ]. 
	result := self visitNode: anAST body.
	self popFrame.
	^ result
]
]]]

We define the method ==currentMethod== to access the current method stored in the current frame.
[[[
CHInterpretable >> currentMethod [
	^ self tempAt: #___method
]
]]]

Note that using the current to store the current method will work, even if we have several messages in sequence. 
It will work since the stack is balanced: a new frame is pushed before any message is executed and popped after each message is executed.
So the frame will be always about the message it executes.

We redefine the ==visitMessageNode:== method to change class where to start looking for the method. 

[[[
CHInterpreterTest >> visitMessageNode: aMessageNode [

	| rec method args lookupClass pragma | 
	rec := self visitNode: aMessageNode receiver.
	args := aMessageNode arguments collect: [ :each | self visitNode: each ].
	
	lookupClass := aMessageNode receiver isSuper 
		ifTrue: [ self currentMethod methodClass superclass ] 
		ifFalse: [ rec class ].
	method :=  self lookup: aMessageNode selector fromClass: lookupClass.	
	^ self executeMethod: method withReceiver: rec andArguments: args
]
]]]	



!!! Overridden Messsages
So far we made sure that sending a message using ==super== starts in the superclass of the class using the expression. 
Now we would like to make sure that the lookup works even in presence of overridden methods. 

Let us define some method for our future tests. 
We define the method ==redefineMethod== in the subclass and the superclass.

[[[
CHInterpretable >> redefinedMethod [
	^ super redefinedMethod
]
]]]

[[[
CHInterpretableSuperClass >> redefinedMethod [
		^ 5
]
]]]

We defined a test which sends a message to the subclass instance and verifies that the 
method defined in the superclass is effectively executed. 

[[[
CHInterpreterTest >> testLookupRedefinedMethod [
	"
	CHInterpretable>>redefinedMethod
		^ super redefinedMethod
	CHInterpretableSuperClass>>redefinedMethod
		^ 5
	"
	self assert: (self executeSelector: #redefinedMethod) equals: 5
]
]]]

This test should run. 


!!! Checking Correct Semantics

Some books define wrongly that ==super== looks up method starting from the superclass of the class of the receiver. 
This is plain wrong and only works when the inheritance depth is limited to two: a class and its superclass.

The setup to define a sitation showing that with the previous wrong semantics the system loops is rather simple. 
We create an instance of the deepest subclass and define the method in its superclass to do a super call as shown by Figure *@fighierarchyFull*.

We define the method ==redefinedMethodAtThreeLevels== in the middle class. 
[[[
CHInterpretableSuperClass >> redefinedMethodAtThreeLevels [
	^ super redefinedMethodAtThreeLevels
	]
]]]

and redefine it in its superclass. 

[[[
CHInterpretableSecondSuperClass >> redefinedMethodAtThreeLevels [
	^ 5
]
]]]

+The full hierarchy of setup tests.>file://figures/hierarchy.pdf|width=80|label=fighierarchyFull+

The following test should pass. 

[[[
CHInterpreterTest >> testLookupSuperMessageNotInReceiverSuperclass [
	"
	This test tests that it does not loop!

	MiddleSuperclass>>redefinedMethodAtThreeLevels
		^ super redefinedMethodAtThreeLevels
	Superclass>>redefinedMethodAtThreeLevels
		^ 5
	"
	self assert: (self executeSelector: #redefinedMethodAtThreeLevels) equals: 5
	]
]]]


The following method reproduces the wrong semantics. Just watch out that the previous test will loop forever.

[[[
CHInterpreter >> visitMessageNode: aMessageNode [

	| rec method args lookupClass | 
	rec := self visitNode: aMessageNode receiver.
	args := aMessageNode arguments collect: [ :each | self visitNode: each ].
	lookupClass := aMessageNode receiver isSuper ifTrue: [ rec class superclass ] ifFalse: [ rec class ].
	method :=  self lookup: aMessageNode selector fromClass: lookupClass.
	^ self executeMethod: method withReceiver: rec andArguments: args
]
]]]

We are ready to introduce temporaries.

!!! Intermezzo -- About Temporaries

Before implementing the interpretation of temporaries we want to show some particularities of Pharo semantics.
Temporaries cannot shadow other temporaries.

The following expression is rejected by the compiler because the second ==tmp== definition is illegal. 
[[[language=pharo
[ 
	| tmp |
	tmp := 2. 
	[
		| tmp |
		tmp := 3 ]]
]]]

Similarly a temporary cannot shadow a block or a method parameter.
Therefore the following expression is not allowed.

[[[language=pharo
[ :tmp |
	| tmp |
	tmp := 2]
]]]

The following method is not valid either.
[[[language=pharo
with: arg

	| arg |
	^ arg
]]]	

!!!! Parameters are Read Only
Finally parameters are read only. 
Therefore the following method is not valid.
[[[language=pharo
with: arg
	arg := 42
]]]

As well as the following expression

[[[language=pharo
[ :tmp |
	tmp := 2
	 ]
]]]



!!! Handling Temporaries

Inside a method, the names of parameters, temporaries and instance variables are flattened and use a single namespace.
We will manage temporaries the same way as parameters.

We start by defining a method just defining and not assigning any value to a temporary variable.

[[[
CHInterpretable >> returnUnassignedTemp [
	| temp |
	^ temp
]
]]]

The companion test verifies that the value of a uninitialized temporary is ==nil==.
[[[
CHInterpreterTest >> testUnassignedTempHasNilValue [
	self assert: (self executeSelector: #returnUnassignedTemp) equals: nil
]
]]]

The current subset of Pharo that we interpret does not contain blocks and their local/temporary variables.
Therefore the temporary variable management is rather simple.
We modify the == executeMethod:withReceiver:andArguments:== to define the temporaries needed.

[[[
CHInterpreter >> executeMethod: anAST withReceiver: anObject andArguments: aCollection [
	| result |
	self pushNewFrame.
	self tempAt: #___method put: anAST.
	self tempAt: #self put: anObject.
	anAST arguments with: aCollection do: [ :arg :value | self tempAt: arg name put: value ].
	anAST temporaryNames do: [ :tempName | self tempAt: tempName name put: nil ].
	result := self visitNode: anAST body.
	self popFrame.
	^ result
]
]]]

The value of a temporary variable is simply to return the value associated to the variable name in the current frame.
[[[
CHInterpreter >> visitTemporaryNode: aRBTemporaryNode [
	^ self tempAt: aRBTemporaryNode name
]
]]]

The test should be pass.

!!! Checking Temporary Writing
We test also that writing to a temporary variable is working.
We define the simple method ==writeTemporaryVariable==.

[[[
CHInterpretable >> writeTemporaryVariable [
		| temp |
		temp := 100.
		^ temp
]
]]]

Its companion test should pass.

[[[
CHInterpreterTest >> testWriteTemporaryVariable [
	"writeTemporaryVariable
		| temp |
		temp := 100.
		^ temp
	"
	self assert: (self executeSelector: #writeTemporaryVariable) equals: 100
]
]]]	

!!! Extended Read Temp Tests

We take the time to make sure that our implementation is correct. For example, temporaries should correctly
work when sending another message. 
The method ==readCollaboratorTemporaryVariable== defines locally a variable with the same name than ==returnUnassignedTemp==.
Within ==readCollaboratorTemporaryVariable== we assign the temp.
[[[
CHInterpretable >> readCollaboratorTemporaryVariable [
	| temp |
	temp := 17.
	^ collaborator returnUnassignedTemp
]
]]]

The companion test verifies that the assignment in one method does not affect the other.
[[[
CHInterpreterTest >> testReadTemporaryVariableDoesNotEscapeItsDefinition [
	"
	readCollaboratorTemporaryVariable
		| temp |
		temp := 17.
		^ collaborator returnUnassignedTemp
	
	returnUnassignedTemp
		| temp |
		^ temp
	"
	self assert: (self executeSelector: #readCollaboratorTemporaryVariable) equals: nil
]
]]]


[[[
CHInterpreterTest >> testReadTemporaryVariableAfterMessageSend [
	"
	readTemporaryVariableAfterMessageSend
		| temp |
		temp := 17.
		collaborator returnUnassignedTemp.
		^ temp
	
	returnUnassignedTemp
		| temp |
		^ temp
	"
	self assert: (self executeSelector: #readTemporaryVariableAfterMessageSend) equals: 17
]
]]]





!!! Extended write temp tests

[[[
CHInterpreterTest >> testWriteTemporaryVariableDoesNotEscapeItsDefinition [
	"writeCollaboratorTemporaryVariable

		| temp |
		temp := 17.
		collaborator writeTemporaryVariable.
		^ temp
	
	writeTemporaryVariable

		| temp |
		temp := 100.
		^ temp
	"
	self assert: (self executeSelector: #writeCollaboratorTemporaryVariable) equals: 17
]
]]]




!!! Extra tests

[[[
testArgumentAccess [
	"
	changeCollaboratorWithArgument
		collaborator x: 500
	"

	receiver x: 200.
	collaborator x: 300.
	self executeSelector: #changeCollaboratorWithArgument.
	self assert: receiver x equals: 200.
	self assert: collaborator x equals: 500
]
]]]
	
[[[
testArgumentAccessDoesNotEscapeItsDefinition [
	"
	changeCollaboratorXWithConflictingArgumentNAmes
		collaborator collaboratorXIgnoringArgumentWithSameName: 1987
	"

	receiver x: 200.
	collaborator x: 300.

	"Test precondition. Both methods have arguments with the same name.
	Otherwise this test could be green but false."
	self
		assert: (C#Interpretable >> #collaboratorXIgnoringArgumentWithSameName:) argumentNames
		equals: (C#Interpretable >> #x:) argumentNames.

	self executeSelector: #changeCollaboratorXWithConflictingArgumentNAmes.

	self assert: receiver x equals: 200.
	self assert: collaborator x equals: 100
]
]]]
