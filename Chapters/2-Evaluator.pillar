!! A First Interpreter: An Simple Evaluator


!!! Setting the stage
[[[
TestCase subclass: #BasicInterpreterTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Champollion'
]]]

[[[
Object subclass: #Interpretable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Champollion'
]]]

[[[
Interpretable >> returnFive

	^ 5
]]]

[[[
BasicInterpreterTest >> testReturnConstant

	| ast result |
	ast := (Interpretable >> #returnFive) ast.
	result := self interpreter execute: ast. 
	self assert: result equals: 5
]]]


[[[
BasicInterpreterTest >> interpreterClass 

	^ BasicInterpreter
]]]

[[[
BasicInterpreterTest >> interpreter

	^ self interpreterClass new
]]]


!!! Building a minimal constant evaluator

[[[
Object subclass: #BasicInterpreter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Champollion'
]]]

[[[
BasicInterpreter >> execute: anAST

	^ self visitNode: anAST
]]]


[[[
BasicInterpreter >> visitNode: aNode
	^ aNode acceptVisitor: self
]]]

[[[
BasicInterpreter >> visitMethodNode: aMethodNode

	^ self visitMethodBodyNode: aMethodNode body
]]]

[[[
BasicInterpreter >> visitMethodBodyNode: aMethodBodyNode
	^ self visitNode: aMethodBodyNode 
]]]

[[[
BasicInterpreter >> visitSequenceNode: aSequenceNode
	
	aSequenceNode statements allButLast do: [ :each | self visitNode: each ].
	^ self visitNode: aSequenceNode statements last.
]]]


[[[
BasicInterpreter >> visitReturnNode: aReturnNode

	^ self visitNode: aReturnNode value
]]]


[[[
BasicInterpreter >> visitLiteralValueNode: aRBLiteralValueNode

	^ aRBLiteralValueNode value
]]]


!!! Accessing receiver state

[[[
Interpretable >> returnX

	^ x 
]]]

[[[
BasicInterpreterTest >> testAccessXInInstance

	| ast result |
	ast := (Interpretable >> #returnX) ast.
	result := self interpreter execute: ast with: (Interpretable new x: 100).
	self assert: result equals: 100. 
	
]]]


[[[
Interpretable >> x: anInteger

	x := anInteger
]]]



[[[
Object subclass: #BasicInterpreter
	instanceVariableNames: 'receiver'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Champollion'
]]]

[[[
BasicInterpreter >> execute: anAST with: anObject

	receiver := anObject.
	^ self visitNode: anAST
]]]


[[[
BasicInterpreter >> visitInstanceVariableNode: aVariableNode

	^ receiver instVarNamed: aVariableNode name
]]]


!!! Instance variable assignment


[[[
Interpretable >> store100IntoX

	x := 100.
]]]



[[[
Interpretable >> x

	^ x 
]]]


[[[
BasicInterpreterTest >> testStore100IntoX

	| ast result object  |
	ast := (Interpretable >> #store100IntoX) ast.
	object := Interpretable new. 
	result := self interpreter execute: ast with: object. 
	self assert: object x equals: 100
]]]



[[[
BasicInterpreter >> visitAssignmentNode: anAssignmentNode
	" x := 100"
	
	| value | 
	value := (self visitNode: anAssignmentNode value).
	anAssignmentNode variable store: value with: self.
	^ value
]]]


[[[
RBInstanceVariableNode >> store: anObject with: anInterpreter 
	
	anInterpreter receiver instVarNamed: name put: anObject
]]]


!!! Different receivers 

!!! Temps

!!! Message

!!! Lookup

!!! 














