!! Interpreter2: Handling Blocks 

An important aspect of Pharo is its use of closures (named blocks).
In Pharo closures are used to expression all the control-flow instructions. 
In this chapter we will extend interper to handle a first version of closures. 
Later on we will add support for non-local return in Block.

!!! Representing a Closure
The interpretation of a closure is different from the interpretation of its execution. 
The interpretation of a closure is the closure itself (the object that represents it).
The interpretation of the execution is the execution of the closure body.

It means that we need a way to represent a closure.
A closure is similar in a way to a method, except that it does not have a name, and can be defined in a method or another block.

We define a class, ==CHBlock== to represent a block. It has an instance variable ==code== to hold an AST represeting the block body.
The Pharo compiler represents a block as an instance of the ==RBBlockNode== class.
It body is then an instance of the ==RBSequenceNode==.

[[[
Object subclass: #CHBlock
	instanceVariableNames: 'code'
	classVariableNames: ''
	package: 'Champollion'
]]]

[[[
CHBlock >> code: aRBBlockNode 
	code := aRBBlockNode
]]]

[[[
CHBlock >> code
	^ code
]]]


We write a test for this. 
The method ==returnBlock== just returns a block without executing it. 

[[[
CHInterpretable >> returnBlock [
	^ [ 1 . 5 ]
]
]]]

The test verifies that we get the corresponding AST (see Figure *@NodeHierarchy*).

[[[
CHInterpreterTest >> testBlock [
	"
	returnBlock
		^ [ 1 . 5 ] 
	"
	| bk1 |
	bk1 := (self executeSelector: #returnBlock).
	self assert: bk1 code isBlock.
	self assert: bk1 code body isSequence
]
]]]

When the interpreter encounters a block node, it should create the associated block object.
We redefine the method ==visitBlockNode:== to do it. 

[[[
CHInterpreter >> visitBlockNode: aRBBlockNode [
	^ CHBlock new
		code: aRBBlockNode;
		yourself
]
]]]

The new test should pass. 

!!! Handling Block Execution

Closures are executed when they receive the messages ==value==, ==value:==, ==value:value:== and more. 
On the reception of such messages, their bodies should be executed.

The following code and its companion test illustrate what we expect. 
[[[
CHInterpretable >> returnBlockValue [
	^ [ 1 . 5 ] value
]
]]]


[[[
CHInterpreterTest >> testBlockValueIsLastStatementValue
	"returnBlockValue
		^ [ 1 . 5 ] value
	"
	self assert: (self executeSelector: #returnBlockValue) equals: 5
]]]

In Pharo all the control flow instructions are based on the execution of closures.
In addition certain methods are primitives in the sense that they cannot be expressed in Pharo (this is the case
for ==at:== and ==at:put:==).

This raises the question of the implementation of the interpretation of such methods by our interpreter. 
We do not really want to have to changes the ==visitMessageNode:== method for each control flow. 

The solution we propose is to distinguish the message to be executed by tagging it with a pragma.
For example the following method ==value== is tagged with the annotation ==astInterpreterPrimitive: #value==. 

Note that the method values is a primitive from the interpreter perspective in the sense
that we cannot to express its definition in Pharo without replying on reflective operation.

[[[
CHBlock >> value [

	"AST interpreter primitive.
	This will call"
	<astInterpreterPrimitive: #value>
	
	"If there "
	self halt.
]
]]]

Once such a method is tagged, we have to change the ==visitMessageNode:== method to take into it account.













!!! Self in Block

[[[
CHInterpretable >> readSelfInBlock [
	^ [ self ] value
]
]]]

[[[
CHInterpreterTest >> testReadSelfInBlock [
	"readSelfInBlock
		^ [ self ] value
	"
	self assert: (self executeSelector: #readSelfInBlock) equals: receiver
]
]]]

!!! Instance Variable Access

[[[
CHInterpreterTest >> testReadInstanceVariableInBlock
	"
	readInstanceVariableInBlock
		^ [ x ] value
	"
	self assert: (self executeSelector: #readInstanceVariableInBlock) equals: receiver x
]]]

!!! Instance Variable Store

[[[
CHInterpretable >> writeInstanceVariableInBlock
	[ x := 17 ] value
]]]


[[[
CHInterpreterTest >> testWriteInstanceVariableInBlock [
	"
	writeInstanceVariableInBlock
		[ x := 17 ] value
	"
	self executeSelector: #writeInstanceVariableInBlock.
	self assert: receiver x equals: 17
]
]]]


!!! Conclusion

In this chapter we extended the interpreter to handle message arguments, method temporaries and method lookup.
We revisited the semantics of ==self== and ==super==.


