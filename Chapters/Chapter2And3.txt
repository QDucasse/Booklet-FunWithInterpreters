

[[[
CHInterpreterTest >> testBlockValueIsLastStatementValue
	"
	This tests tests that it does not loop\
	
	returnBlockValue
		^ [ 1 . 5 ] value
	"

	self assert: (self executeSelector: #returnBlockValue) equals: 5
]]]







[[[
Object subclass: #CHBlock
	instanceVariableNames: 'code'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Champollion-Core'
]]]

[[[
CHInterpreter >> visitBlockNode: aRBBlockNode 
	
	^ CHBlock new
		code: aRBBlockNode;
		yourself
]]]

[[[
CHBlock >> code: aRBBlockNode 
	code := aRBBlockNode
]]]

[[[
CHInterpreter >> visitMessageNode: aMessageNode

	| rec method args lookupClass | 
	rec := self visitNode: aMessageNode receiver.
	args := aMessageNode arguments collect: [ :each | self visitNode: each ].
	
	self haltIf: [ aMessageNode selector = #value ].
	
	lookupClass := aMessageNode receiver isSuper ifTrue: [ self currentMethod methodClass superclass ] ifFalse: [ rec class ].
	method :=  self lookup: aMessageNode selector fromClass: lookupClass.
	^ self executeMethod: method withReceiver: rec andArguments: args
]]]

[[[
CHInterpreter >> visitMessageNode: aMessageNode

	| rec method args lookupClass pragma | 
	rec := self visitNode: aMessageNode receiver.
	args := aMessageNode arguments collect: [ :each | self visitNode: each ].
	
	lookupClass := aMessageNode receiver isSuper ifTrue: [ self currentMethod methodClass superclass ] ifFalse: [ rec class ].
	method :=  self lookup: aMessageNode selector fromClass: lookupClass.

	pragma := method pragmaNamed: #astInterpreterPrimitive: ifAbsent: [ nil ].
	pragma ifNotNil: [
		1halt.
	].
	
	^ self executeMethod: method withReceiver: rec andArguments: args
]]]

[[[
CHBlock >> value

	"AST interpreter primitive.
	This will call"
	<astInterpreterPrimitive: #value>
	
	"If there "
	self halt.
]]]

[[[
CHBlock >> code
	^ code
]]]

[[[
CHInterpreter >> visitMessageNode: aMessageNode

	| rec method args lookupClass pragma | 
	rec := self visitNode: aMessageNode receiver.
	args := aMessageNode arguments collect: [ :each | self visitNode: each ].
	
	lookupClass := aMessageNode receiver isSuper ifTrue: [ self currentMethod methodClass superclass ] ifFalse: [ rec class ].
	method :=  self lookup: aMessageNode selector fromClass: lookupClass.

	pragma := method pragmaNamed: #astInterpreterPrimitive: ifAbsent: [ nil ].
	pragma ifNotNil: [
		"If the method is marked with the astInterpreterPrimitive: pragma, this is a block evaluation method.
		The receiver is the block closure and the arguments are the arguments of the evaluation"
		self
			executeMethod: rec code body
			withReceiver: nil
			andArguments: args
	].
	
	^ self executeMethod: method withReceiver: rec andArguments: args
]]]

[[[
CHInterpreter >> visitMessageNode: aMessageNode

	| rec method args lookupClass pragma | 
	rec := self visitNode: aMessageNode receiver.
	args := aMessageNode arguments collect: [ :each | self visitNode: each ].
	
	lookupClass := aMessageNode receiver isSuper ifTrue: [ self currentMethod methodClass superclass ] ifFalse: [ rec class ].
	method :=  self lookup: aMessageNode selector fromClass: lookupClass.

	pragma := method pragmaNamed: #astInterpreterPrimitive: ifAbsent: [ nil ].
	pragma ifNotNil: [
		"If the method is marked with the astInterpreterPrimitive: pragma, this is a block evaluation method.
		The receiver is the block closure and the arguments are the arguments of the evaluation"
		^ self
			executeMethod: rec code body
			withReceiver: nil
			andArguments: args
	].
	
	^ self executeMethod: method withReceiver: rec andArguments: args
]]]

[[[
CHInterpreter >> visitMessageNode: aMessageNode

	| rec method args lookupClass pragma | 
	rec := self visitNode: aMessageNode receiver.
	args := aMessageNode arguments collect: [ :each | self visitNode: each ].
	
	lookupClass := aMessageNode receiver isSuper ifTrue: [ self currentMethod methodClass superclass ] ifFalse: [ rec class ].
	method :=  self lookup: aMessageNode selector fromClass: lookupClass.

	pragma := method pragmaNamed: #astInterpreterPrimitive: ifAbsent: [ nil ].
	pragma ifNotNil: [
		"If the method is marked with the astInterpreterPrimitive: pragma, this is a block evaluation method.
		The receiver is the block closure and the arguments are the arguments of the evaluation"
		^ self
			executeMethod: rec code
			withReceiver: nil
			andArguments: args
	].
	
	^ self executeMethod: method withReceiver: rec andArguments: args
]]]

[[[
CHInterpreter >> visitMessageNode: aMessageNode

	| rec method args lookupClass pragma | 
	rec := self visitNode: aMessageNode receiver.
	args := aMessageNode arguments collect: [ :each | self visitNode: each ].
	
	lookupClass := aMessageNode receiver isSuper ifTrue: [ self currentMethod methodClass superclass ] ifFalse: [ rec class ].
	method :=  self lookup: aMessageNode selector fromClass: lookupClass.

	pragma := method pragmaNamed: #astInterpreterPrimitive: ifAbsent: [ nil ].
	pragma ifNotNil: [
		"If the method is marked with the astInterpreterPrimitive: pragma, this is a block evaluation method.
		The receiver is the block closure and the arguments are the arguments of the evaluation"
		^ self
			executeMethod: rec code body
			withReceiver: nil
			andArguments: args
	].
	
	^ self executeMethod: method withReceiver: rec andArguments: args
]]]

[[[
CHInterpreter >> executeBlock: anAST withReceiver: anObject andArguments: aCollection
	| result |
	self pushNewFrame.
	self tempAt: #___method put: anAST.
	self tempAt: #self put: anObject.
	anAST arguments with: aCollection do: [ :arg :value | self tempAt: arg name put: value ]. 
	anAST temporaryNames do: [ :tempName | self tempAt: tempName put: nil ]. 
	
	result := self visitNode: anAST body.
	
	self popFrame.
	^ result
]]]

[[[
CHInterpreter >> executeBlock: aBlockNode withReceiver: anObject andArguments: aCollection
	| result |
	self pushNewFrame.
	self tempAt: #___method put: aBlockNode.
	self tempAt: #self put: anObject.
	aBlockNode arguments with: aCollection do: [ :arg :value | self tempAt: arg name put: value ]. 
	aBlockNode temporaryNames do: [ :tempName | self tempAt: tempName put: nil ]. 
	
	result := self visitNode: aBlockNode body.
	
	self popFrame.
	^ result
]]]

[[[
CHInterpreter >> visitMessageNode: aMessageNode

	| rec method args lookupClass pragma | 
	rec := self visitNode: aMessageNode receiver.
	args := aMessageNode arguments collect: [ :each | self visitNode: each ].
	
	lookupClass := aMessageNode receiver isSuper ifTrue: [ self currentMethod methodClass superclass ] ifFalse: [ rec class ].
	method :=  self lookup: aMessageNode selector fromClass: lookupClass.

	pragma := method pragmaNamed: #astInterpreterPrimitive: ifAbsent: [ nil ].
	pragma ifNotNil: [
		"If the method is marked with the astInterpreterPrimitive: pragma, this is a block evaluation method.
		The receiver is the block closure and the arguments are the arguments of the evaluation"
		^ self
			executeBlock: rec code body
			withReceiver: nil
			andArguments: args
	].
	
	^ self executeMethod: method withReceiver: rec andArguments: args
]]]

[[[
CHInterpreter >> visitMessageNode: aMessageNode

	| rec method args lookupClass pragma | 
	rec := self visitNode: aMessageNode receiver.
	args := aMessageNode arguments collect: [ :each | self visitNode: each ].
	
	lookupClass := aMessageNode receiver isSuper ifTrue: [ self currentMethod methodClass superclass ] ifFalse: [ rec class ].
	method :=  self lookup: aMessageNode selector fromClass: lookupClass.

	pragma := method pragmaNamed: #astInterpreterPrimitive: ifAbsent: [ nil ].
	pragma ifNotNil: [
		"If the method is marked with the astInterpreterPrimitive: pragma, this is a block evaluation method.
		The receiver is the block closure and the arguments are the arguments of the evaluation"
		^ self
			executeBlock: rec code
			withReceiver: nil
			andArguments: args
	].
	
	^ self executeMethod: method withReceiver: rec andArguments: args
]]]

[[[
CHInterpreter >> executeMethod: anAST withReceiver: anObject andArguments: aCollection
	| result |
	self pushNewFrame.
	self tempAt: #___method put: anAST.
	self tempAt: #self put: anObject.
	anAST arguments with: aCollection do: [ :arg :value | self tempAt: arg name put: value ]. 
	anAST temporaryNames do: [ :tempName | self tempAt: tempName put: nil ]. 
	
	result := self visitNode: anAST body.
	
	self popFrame.
	^ result
]]]

[[[
CHInterpreter >> visitMessageNode: aMessageNode

	| rec method args lookupClass pragma | 
	rec := self visitNode: aMessageNode receiver.
	args := aMessageNode arguments collect: [ :each | self visitNode: each ].
	
	lookupClass := aMessageNode receiver isSuper ifTrue: [ self currentMethod methodClass superclass ] ifFalse: [ rec class ].
	method :=  self lookup: aMessageNode selector fromClass: lookupClass.

	pragma := method pragmaNamed: #astInterpreterPrimitive: ifAbsent: [ nil ].
	pragma ifNotNil: [
		"If the method is marked with the astInterpreterPrimitive: pragma, this is a block evaluation method.
		The receiver is the block closure and the arguments are the arguments of the evaluation"
		^ self
			executeMethod: rec code
			withReceiver: nil
			andArguments: args
	].
	
	^ self executeMethod: method withReceiver: rec andArguments: args
]]]

[[[
CHInterpreter >> executeBlock: aBlockNode withReceiver: anObject andArguments: aCollection
	| result |
	self pushNewFrame.
	self tempAt: #___method put: aBlockNode.
	self tempAt: #self put: anObject.
	aBlockNode arguments with: aCollection do: [ :arg :value | self tempAt: arg name put: value ]. 
	aBlockNode temporaryNames do: [ :tempName | self tempAt: tempName put: nil ]. 
	
	result := self visitNode: aBlockNode body.
	
	self popFrame.
	^ result
]]]


[[[
CHInterpreter >> visitMethodNode: aMethodNode
	
	^ self visitMethodBodyNode: aMethodNode body
]]]


[[[
CHInterpreter >> visitMethodBodyNode: aMethodBodyNode
	^ self visitNode: aMethodBodyNode 
]]]


[[[
CHInterpreterTest >> testBlockValueIsLastStatementValue
	"
	returnBlockValue
		^ [ 1 . 5 ] value
	"

	self assert: (self executeSelector: #returnBlockValue) equals: 5
]]]

[[[
CHInterpreterTest >> testReadBlockTemporaryVariable
	"
	returnBlockValue
		^ [ | temp | temp := 100. temp ] value
	"

	self assert: (self executeSelector: #returnBlockValue) equals: 5
]]]

[[[
CHInterpreterTest >> testReadBlockTemporaryVariable
	"
	returnBlockValue
		^ [ | temp | temp := 100. temp ] value
	"

	self assert: (self executeSelector: #returnBlockValue) equals: 100
]]]

[[[
CHInterpreterTest >> testReadBlockTemporaryVariable
	"
	readBlockTemporaryVariable
		^ [ | temp | temp := 100. temp ] value
	"

	self assert: (self executeSelector: #returnBlockValue) equals: 100
]]]

[[[
CHInterpreterTest >> testReadBlockTemporaryVariable
	"
	readBlockTemporaryVariable
		^ [ | temp | temp := 100. temp ] value
	"

	self assert: (self executeSelector: #readBlockTemporaryVariable) equals: 100
]]]

[[[
CHInterpretable >> readBlockTemporaryVariable

	^ [ | temp | temp := 100. temp ] value
]]]

[[[
CHInterpreterTest >> testReadSelfInBlock
	"
	readSelfInBlock
		^ [ self ] value
	"

	self assert: (self executeSelector: #readBlockTemporaryVariable) equals: receiver
]]]

[[[
CHInterpreterTest >> testReadSelfInBlock
	"
	readSelfInBlock
		^ [ self ] value
	"

	self assert: (self executeSelector: #readSelfInBlock) equals: receiver
]]]

[[[
CHInterpretable >> readSelfInBlock

	^ [ self ] value
]]]

[[[
Object subclass: #CHBlock
	instanceVariableNames: 'code homeContext'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Champollion-Core'
]]]


[[[
CHBlock >> homeContext
	^ homeContext
]]]

[[[
CHBlock >> homeContext: anObject
	homeContext := anObject
]]]

[[[
CHInterpreter >> visitBlockNode: aRBBlockNode 
	
	^ CHBlock new
		code: aRBBlockNode;
		homeContext: self topFrame;
		yourself
]]]

[[[
CHInterpreter >> visitMessageNode: aMessageNode

	| rec method args lookupClass pragma | 
	rec := self visitNode: aMessageNode receiver.
	args := aMessageNode arguments collect: [ :each | self visitNode: each ].
	
	lookupClass := aMessageNode receiver isSuper ifTrue: [ self currentMethod methodClass superclass ] ifFalse: [ rec class ].
	method :=  self lookup: aMessageNode selector fromClass: lookupClass.

	pragma := method pragmaNamed: #astInterpreterPrimitive: ifAbsent: [ nil ].
	pragma ifNotNil: [
		"If the method is marked with the astInterpreterPrimitive: pragma, this is a block evaluation method.
		The receiver is the block closure and the arguments are the arguments of the evaluation"
		^ self
			executeMethod: rec code
			withReceiver: rec homeContext receiver
			andArguments: args
	].
	
	^ self executeMethod: method withReceiver: rec andArguments: args
]]]

[[[
CHInterpreter >> visitMessageNode: aMessageNode

	| rec method args lookupClass pragma | 
	rec := self visitNode: aMessageNode receiver.
	args := aMessageNode arguments collect: [ :each | self visitNode: each ].
	
	lookupClass := aMessageNode receiver isSuper ifTrue: [ self currentMethod methodClass superclass ] ifFalse: [ rec class ].
	method :=  self lookup: aMessageNode selector fromClass: lookupClass.

	pragma := method pragmaNamed: #astInterpreterPrimitive: ifAbsent: [ nil ].
	pragma ifNotNil: [
		"If the method is marked with the astInterpreterPrimitive: pragma, this is a block evaluation method.
		The receiver is the block closure and the arguments are the arguments of the evaluation"
		^ self
			executeMethod: rec code
			withReceiver: (rec homeContext at: #self)
			andArguments: args
	].
	
	^ self executeMethod: method withReceiver: rec andArguments: args
]]]

[[[
CHInterpretable >> readSuperInBlock

	^ [ super ] value
]]]

[[[
CHInterpreterTest >> testReadSuperInBlock
	"
	readSuperInBlock
		^ [ super ] value
	"

	self assert: (self executeSelector: #readSuperInBlock) equals: receiver
]]]

[[[
CHInterpreterTest >> testReadInstanceVariableInBlock
	"
	readInstanceVariableInBlock
		^ [ x := 17 ] value
	"

	self executeSelector: #readInstanceVariableInBlock.
	self assert: receiver x equals: 17
]]]

[[[
CHInterpretable >> readInstanceVariableInBlock
		^ [ x := 17 ] value
]]]

[[[
CHInterpretable >> readInstanceVariableInBlock

	^ [ x := 17 ] value
]]]

[[[
CHInterpreterTest >> testWriteInstanceVariableInBlock
	"
	writeInstanceVariableInBlock
		^ [ x := 17 ] value
	"

	self executeSelector: #writeInstanceVariableInBlock.
	self assert: receiver x equals: 17
]]]

[[[
CHInterpretable >> writeInstanceVariableInBlock

	^ [ x := 17 ] value
]]]

[[[
CHInterpretable >> writeInstanceVariableInBlock

	^ [ x ] value
]]]

[[[
CHInterpretable >> writeInstanceVariableInBlock

	^ [ x := 17 ] value
]]]

[[[
CHInterpretable >> readInstanceVariableInBlock

	^ [ x ] value
]]]

[[[
CHInterpreterTest >> testReadInstanceVariableInBlock
	"
	readInstanceVariableInBlock
		^ [ x ] value
	"

	self assert: (self executeSelector: #readInstanceVariableInBlock) equals: receiver x
]]]

[[[
CHInterpretable >> readTemporaryVariableInBlock
	
	| temp |
	temp := 17.
	^ [ temp ] value
]]]

[[[
CHInterpreterTest >> testReadTemporaryVariableInBlock
	"
	readTemporaryVariableInBlock
		| temp |
		temp := 17.
		^ [ temp ] value
	"

	self assert: (self executeSelector: #readTemporaryVariableInBlock) equals: 17
]]]

[[[
CHInterpreter >> tempAt: aSymbol

	| currentSearchFrame |
	currentSearchFrame := self topFrame.
	[ currentSearchFrame isNil ] whileFalse: [
		currentSearchFrame at: aSymbol ifPresent: [ :found | ^ found ].
		currentSearchFrame := currentSearchFrame at: #___home
	].
	self error: 'Variable ', aSymbol, ' not found'
]]]

[[[
CHInterpreter >> tempAt: aSymbol

	| currentSearchFrame |
	currentSearchFrame := self topFrame.
	[ currentSearchFrame isNil ] whileFalse: [
		currentSearchFrame at: aSymbol ifPresent: [ :found | ^ found ].
		currentSearchFrame := currentSearchFrame at: #___home ifAbsent: [ nil ].
	].
	self error: 'Variable ', aSymbol, ' not found'
]]]

[[[
CHInterpreter >> tempAt: aSymbol

	| currentSearchFrame |
	currentSearchFrame := self topFrame.
	[ currentSearchFrame isNil ] whileFalse: [
		currentSearchFrame at: aSymbol ifPresent: [ :found | ^ found ].
		currentSearchFrame := currentSearchFrame at: #___block ifPresent: [ :block | block outerContext ] ifAbsent: [ nil ].
	].
	self error: 'Variable ', aSymbol, ' not found'
]]]

[[[
CHInterpreter >> tempAt: aSymbol

	| currentSearchFrame |
	currentSearchFrame := self topFrame.
	[ currentSearchFrame isNil ] whileFalse: [
		currentSearchFrame at: aSymbol ifPresent: [ :found | ^ found ].
		currentSearchFrame := currentSearchFrame
			at: #___block
			ifPresent: [ :block | block outerContext ]
			ifAbsent: [ nil ].
	].
	self error: 'Variable ', aSymbol, ' not found'
]]]

[[[
Object subclass: #CHBlock
	instanceVariableNames: 'code homeContext outerContext'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Champollion-Core'
]]]

[[[
CHBlock >> homeContext: anObject
	outerContext := anObject
]]]

[[[
CHBlock >> homeContext
	^ outerContext
]]]

[[[
Object subclass: #CHBlock
	instanceVariableNames: 'code outerContext'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Champollion-Core'
]]]


[[[
CHBlock >> outerContext: anObject
	outerContext := anObject
]]]

[[[
CHInterpreter >> visitBlockNode: aRBBlockNode 
	
	^ CHBlock new
		code: aRBBlockNode;
		outerContext: self topFrame;
		yourself
]]]

[[[
CHBlock >> homeContext: anObject
	outerContext := anObject
]]]



[[[
CHBlock >> outerContext
	^ outerContext
]]]

[[[
CHInterpreter >> visitMessageNode: aMessageNode

	| rec method args lookupClass pragma | 
	rec := self visitNode: aMessageNode receiver.
	args := aMessageNode arguments collect: [ :each | self visitNode: each ].
	
	lookupClass := aMessageNode receiver isSuper ifTrue: [ self currentMethod methodClass superclass ] ifFalse: [ rec class ].
	method :=  self lookup: aMessageNode selector fromClass: lookupClass.

	pragma := method pragmaNamed: #astInterpreterPrimitive: ifAbsent: [ nil ].
	pragma ifNotNil: [
		"If the method is marked with the astInterpreterPrimitive: pragma, this is a block evaluation method.
		The receiver is the block closure and the arguments are the arguments of the evaluation"
		^ self
			executeMethod: rec code
			withReceiver: (rec outerContext at: #self)
			andArguments: args
	].
	
	^ self executeMethod: method withReceiver: rec andArguments: args
]]]

[[[
CHBlock >> homeContext
	^ outerContext
]]]


[[[
CHInterpreter >> executeMethod: anAST withReceiver: anObject andArguments: aCollection closureOrNil: closureOrNil
	| result |
	self pushNewFrame.
	
	closureOrNil ifNotNil: [ self tempAt: #___closureOrNil ].
	self tempAt: #___method put: anAST.
	self tempAt: #self put: anObject.
	anAST arguments with: aCollection do: [ :arg :value | self tempAt: arg name put: value ]. 
	anAST temporaryNames do: [ :tempName | self tempAt: tempName put: nil ]. 
	
	result := self visitNode: anAST body.
	
	self popFrame.
	^ result
]]]

[[[
CHInterpreter >> tempAt: aSymbol

	| currentSearchFrame |
	currentSearchFrame := self topFrame.
	[ currentSearchFrame isNil ] whileFalse: [
		currentSearchFrame at: aSymbol ifPresent: [ :found | ^ found ].
		currentSearchFrame := currentSearchFrame
			at: #___closureOrNil
			ifPresent: [ :block | block outerContext ]
			ifAbsent: [ nil ].
	].
	self error: 'Variable ', aSymbol, ' not found'
]]]

[[[
CHInterpreter >> executeMethod: anAST withReceiver: anObject andArguments: aCollection
	
	^ self executeMethod: anAST withReceiver: anObject andArguments: aCollection closureOrNil: nil
]]]

[[[
CHInterpreter >> visitMessageNode: aMessageNode

	| rec method args lookupClass pragma | 
	rec := self visitNode: aMessageNode receiver.
	args := aMessageNode arguments collect: [ :each | self visitNode: each ].
	
	lookupClass := aMessageNode receiver isSuper ifTrue: [ self currentMethod methodClass superclass ] ifFalse: [ rec class ].
	method :=  self lookup: aMessageNode selector fromClass: lookupClass.

	pragma := method pragmaNamed: #astInterpreterPrimitive: ifAbsent: [ nil ].
	pragma ifNotNil: [
		"If the method is marked with the astInterpreterPrimitive: pragma, this is a block evaluation method.
		The receiver is the block closure and the arguments are the arguments of the evaluation"
		^ self
			executeMethod: rec code
			withReceiver: (rec outerContext at: #self)
			andArguments: args
			closureOrNil: rec
	].
	
	^ self executeMethod: method withReceiver: rec andArguments: args
]]]

[[[
CHInterpreter >> executeMethod: anAST withReceiver: anObject andArguments: aCollection closureOrNil: closureOrNil
	| result |
	self pushNewFrame.
	
	closureOrNil ifNotNil: [ self tempAt: #___closureOrNil put: closureOrNil ].
	self tempAt: #___method put: anAST.
	self tempAt: #self put: anObject.
	anAST arguments with: aCollection do: [ :arg :value | self tempAt: arg name put: value ]. 
	anAST temporaryNames do: [ :tempName | self tempAt: tempName put: nil ]. 
	
	result := self visitNode: anAST body.
	
	self popFrame.
	^ result
]]]


[[[
CHInterpreterTest >> testReadOuterTemporaryVariableInBlock
	"
	readTemporaryVariableInBlock
		| temp |
		temp := 17.
		^ [ temp ] value
	"

	self assert: (self executeSelector: #readTemporaryVariableInBlock) equals: 17
]]]

[[[
CHInterpreterTest >> testReadTemporaryVariableInBlock
	"
	readTemporaryVariableInBlock
		| temp |
		temp := 17.
		^ [ temp ] value
	"

	self assert: (self executeSelector: #readTemporaryVariableInBlock) equals: 17
]]]


[[[
CHInterpreterTest >> testReadOuterArgumentVariableInBlock
	"
	readOuterArgumentVariableInBlock
		self readOuterArgumentVariableInBlock: 25

	readOuterArgumentVariableInBlock: argument
		^ [ argument ] value
	"

	self assert: (self executeSelector: #readTemporaryVariableInBlock) equals: 25
]]]

[[[
CHInterpretable >> readOuterArgumentVariableInBlock

	self readOuterArgumentVariableInBlock: 25
]]]

[[[
CHInterpretable >> readOuterArgumentVariableInBlock

	^ self readOuterArgumentVariableInBlock: 25
]]]

[[[
CHInterpretable >> readOuterArgumentVariableInBlock: argument

		^ [ argument ] value
]]]

[[[
CHInterpretable >> readOuterArgumentVariableInBlock: argument

	^ [ argument ] value
]]]

[[[
CHInterpreterTest >> testReadOuterArgumentVariableInBlock
	"
	readOuterArgumentVariableInBlock
		^ self readOuterArgumentVariableInBlock: 25

	readOuterArgumentVariableInBlock: argument
		^ [ argument ] value
	"

	self assert: (self executeSelector: #readTemporaryVariableInBlock) equals: 25
]]]

[[[
CHInterpreterTest >> testReadOuterArgumentVariableInBlock
	"
	readOuterArgumentVariableInBlock
		^ self readOuterArgumentVariableInBlock: 25

	readOuterArgumentVariableInBlock: argument
		^ [ argument ] value
	"

	self assert: (self executeSelector: #readOuterArgumentVariableInBlock) equals: 25
]]]

[[[
CHInterpreterTest >> testReadHomeTemporaryVariableInBlock
	"
	readHomeTemporaryVariableInBlock
		| temp |
		temp := 17.
		^ [ [ temp ] value ] value
	"

	self assert: (self executeSelector: #readHomeTemporaryVariableInBlock) equals: 17
]]]

[[[
CHInterpretable >> readHomeTemporaryVariableInBlock
		| temp |
		temp := 17.
		^ [ [ temp ] value ] value
]]]

[[[
CHInterpretable >> readHomeTemporaryVariableInBlock
	
	| temp |
	temp := 17.
	^ [ [ temp ] value ] value
]]]

[[[
CHInterpretable >> readHomeArgumentVariableInBlock: argument

	^ [ [ argument ] argument ] value
]]]

[[[
CHInterpretable >> readHomeOuterArgumentVariableInBlock

	^ self readHomeOuterArgumentVariableInBlock: 89
]]]

[[[
CHInterpretable >> readHomeOuterArgumentVariableInBlock: argument

	^ [ [ argument ] argument ] value
]]]

[[[
CHInterpretable >> readHomeArgumentVariableInBlock: argument

	^ [ [ argument ] argument ] value
]]]


[[[
CHInterpreterTest >> testReadHomeOuterArgumentVariableInBlock
	"
	readHomeOuterArgumentVariableInBlock

		^ self readHomeOuterArgumentVariableInBlock: 89
	
	readHomeOuterArgumentVariableInBlock: argument

		^ [ [ argument ] argument ] value
	"

	self assert: (self executeSelector: #readHomeOuterArgumentVariableInBlock) equals: 25
]]]

[[[
CHInterpretable >> readHomeOuterArgumentVariableInBlock: argument

	^ [ [ argument ] value ] value
]]]

[[[
CHInterpreterTest >> testReadHomeOuterArgumentVariableInBlock
	"
	readHomeOuterArgumentVariableInBlock

		^ self readHomeOuterArgumentVariableInBlock: 89
	
	readHomeOuterArgumentVariableInBlock: argument

		^ [ [ argument ] value ] value
	"

	self assert: (self executeSelector: #readHomeOuterArgumentVariableInBlock) equals: 25
]]]

[[[
CHInterpreterTest >> testReadHomeOuterArgumentVariableInBlock
	"
	readHomeOuterArgumentVariableInBlock

		^ self readHomeOuterArgumentVariableInBlock: 89
	
	readHomeOuterArgumentVariableInBlock: argument

		^ [ [ argument ] value ] value
	"

	self assert: (self executeSelector: #readHomeOuterArgumentVariableInBlock) equals: 89
]]]

[[[
CHInterpreterTest >> testReadTwoLevelOuterArgumentVariableInBlock
	"
	readTwoLevelOuterArgumentVariableInBlock
		^ [ :arg | [ argument ] value ] value: 99
	"

	self assert: (self executeSelector: #readOuterArgumentVariableInBlock) equals: 99
]]]

[[[
CHInterpreterTest >> testReadTwoLevelOuterArgumentVariableInBlock
	"
	readTwoLevelOuterArgumentVariableInBlock
		^ [ :arg | [ argument ] value ] value: 99
	"

	self assert: (self executeSelector: #readTwoLevelOuterArgumentVariableInBlock) equals: 99
]]]

[[[
CHInterpretable >> readTwoLevelOuterArgumentVariableInBlock
	
	^ [ :argument | [ argument ] value ] value: 99
]]]

[[[
CHInterpreterTest >> testReadTwoLevelOuterArgumentVariableInBlock
	"
	readTwoLevelOuterArgumentVariableInBlock
		^ [ :argument | [ argument ] value ] value: 99
	"

	self assert: (self executeSelector: #readTwoLevelOuterArgumentVariableInBlock) equals: 99
]]]

[[[
CHBlock >> value: argument

	"AST interpreter primitive.
	This will call"
	<astInterpreterPrimitive: #value>
	
	"If there "
	self halt.
]]]

[[[
CHInterpreterTest >> testReadTwoLevelOuterTemporaryVariableInBlock
	"
	readTwoLevelOuterTemporaryVariableInBlock
		^ [ | temp | temp := 88888. [ temp ] value ] value
	"

	self assert: (self executeSelector: #readTwoLevelOuterTemporaryVariableInBlock) equals: 88888
]]]

[[[
CHInterpretable >> readTwoLevelOuterTemporaryVariableInBlock
	
	^ [ | temp | temp := 88888. [ temp ] value ] value
]]]

[[[
CHInterpreterTest >> testReadHomeOuterArgumentVariableInBlockFromDistantCall
	"
	readHomeOuterArgumentVariableInBlockFromDistantCall

		^ self readHomeOuterArgumentVariableInBlock: 89
	
	readHomeOuterArgumentVariableInBlockFromDistantCall: argument

		^ self evaluateBlock: [ [ argument ] value ]
	"

	self assert: (self executeSelector: #readHomeOuterArgumentVariableInBlock) equals: 89
]]]

[[[
CHInterpreterTest >> testReadHomeOuterArgumentVariableInBlockFromDistantCall
	"
	readHomeOuterArgumentVariableInBlockFromDistantCall

		^ self readHomeOuterArgumentVariableInBlockFromDistantCall: 89
	
	readHomeOuterArgumentVariableInBlockFromDistantCall: argument

		^ self evaluateBlock: [ [ argument ] value ]
	"

	self assert: (self executeSelector: #readHomeOuterArgumentVariableInBlock) equals: 89
]]]

[[[
CHInterpretable >> readHomeOuterArgumentVariableInBlockFromDistantCall

		^ self readHomeOuterArgumentVariableInBlockFromDistantCall: 89
	

]]]

[[[
CHInterpretable >> readHomeOuterArgumentVariableInBlockFromDistantCall

		^ self readHomeOuterArgumentVariableInBlockFromDistantCall: 89

]]]

[[[
CHInterpretable >> readHomeOuterArgumentVariableInBlockFromDistantCall

		^ self readHomeOuterArgumentVariableInBlockFromDistantCall: 89
]]]

[[[
CHInterpretable >> readHomeOuterArgumentVariableInBlockFromDistantCall

	^ self readHomeOuterArgumentVariableInBlockFromDistantCall: 89
]]]

[[[
CHInterpretable >> readHomeOuterArgumentVariableInBlockFromDistantCall: argument

	^ self evaluateBlock: [ [ argument ] value ]
]]]

[[[
CHInterpretable >> evaluateBlock: aBlock

	^ aBlock value
]]]

[[[
CHInterpreterTest >> testReadHomeOuterTemporaryVariableInBlockFromDistantCall
	"
	readHomeOuterTemporaryVariableInBlockFromDistantCall
		| temp block |
		temp := 1.
		block := [ [ temp ] value ].
		temp := 77.
		^ self evaluateBlock: block
	"

	self assert: (self executeSelector: #readHomeOuterArgumentVariableInBlock) equals: 89
]]]

[[[
CHInterpreterTest >> testReadHomeOuterTemporaryVariableInBlockFromDistantCall
	"
	readHomeOuterTemporaryVariableInBlockFromDistantCall
		| temp block |
		temp := 1.
		block := [ [ temp ] value ].
		temp := 77.
		^ self evaluateBlock: block
	"

	self assert: (self executeSelector: #readHomeOuterTemporaryVariableInBlockFromDistantCall) equals: 89
]]]

[[[
CHInterpreterTest >> testReadHomeOuterTemporaryVariableInBlockFromDistantCall
	"
	readHomeOuterTemporaryVariableInBlockFromDistantCall
		| temp block |
		temp := 1.
		block := [ [ temp ] value ].
		temp := 77.
		^ self evaluateBlock: block
	"

	self assert: (self executeSelector: #readHomeOuterTemporaryVariableInBlockFromDistantCall) equals: 77
]]]

[[[
CHInterpretable >> readHomeOuterTemporaryVariableInBlockFromDistantCall

	| temp block |
	temp := 1.
	block := [ [ temp ] value ].
	temp := 77.
	^ self evaluateBlock: block
]]]

[[[
CHInterpretable >> readHomeOuterTemporaryVariableInBlockFromDistantCall

	| temp block |
	temp := 1.
	block := [ [ temp ] value ].
	temp := 77.
	^ true ifTrue: block
]]]

